<?php

namespace ContainerLfNfrqY;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\ContainerInterface;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class getMessenger_Transport_MessageOutService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private 'messenger.transport.message_out' shared service.
     *
     * @return \Symfony\Component\Messenger\Transport\TransportInterface
     */
    public static function do($container, $lazyLoad = true)
    {
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Receiver/ReceiverInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Sender/SenderInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/TransportInterface.php';
        include_once \dirname(__DIR__, 4).'/vendor/symfony/messenger/Transport/Serialization/SerializerInterface.php';
        include_once \dirname(__DIR__, 4).'/src/Serializer/ProductMessageSerializer.php';

        $a = ($container->privates['messenger.transport_factory'] ?? $container->load('getMessenger_TransportFactoryService'));

        if (isset($container->privates['messenger.transport.message_out'])) {
            return $container->privates['messenger.transport.message_out'];
        }

        return $container->privates['messenger.transport.message_out'] = $a->createTransport($container->getEnv('KAFKA_DSN'), ['flushInterval' => 10000, 'flushRetries' => 5, 'commitAsync' => true, 'auto_commit' => false, 'receiveTimeout' => 10000, 'topic' => ['name' => $container->getEnv('KAFKA_TOPIC')], 'kafka_conf' => ['security.protocol' => 'sasl_ssl', 'ssl.ca.location' => '/usr/local/share/ca-certificates/Yandex/YandexCA.crt', 'sasl.username' => $container->getEnv('KAFKA_USERNAME'), 'sasl.password' => $container->getEnv('KAFKA_PASSWORD'), 'sasl.mechanisms' => 'SCRAM-SHA-512'], 'transport_name' => 'message_out'], ($container->privates['App\\Serializer\\ProductMessageSerializer'] ??= new \App\Serializer\ProductMessageSerializer()));
    }
}
